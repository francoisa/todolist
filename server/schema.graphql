input ChangeUserInput {
  id: ID!
  firstName: String!
  lastName: String!
  password: String!
  clientMutationId: String
}

type ChangeUserPayload {
  user: User
  clientMutationId: String
}

input CreateSessionInput {
  username: String!
  password: String!
  clientMutationId: String
}

type CreateSessionPayload {
  user: User
  clientMutationId: String
}

input CreateUserInput {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  clientMutationId: String
}

type CreateUserPayload {
  user: User
  clientMutationId: String
}

input DeleteUserInput {
  username: String!
  clientMutationId: String
}

type DeleteUserPayload {
  status: Status
  clientMutationId: String
}

type Mutation {
  changeUser(input: ChangeUserInput!): ChangeUserPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  createSession(input: CreateSessionInput!): CreateSessionPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer(id: ID!): User
  session(username: ID!, password: String!): User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Status implements Node {
  # The ID of an object
  id: ID!
  status: String
  message: String
}

type Todo implements Node {
  # The ID of an object
  id: ID!
  user_id: Int
  status: String
  content: String
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodoEdge]
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  # The ID of an object
  id: ID!
  email: String
  username: String
  firstName: String
  lastName: String
  todos(after: String, first: Int, before: String, last: Int): TodoConnection
}
